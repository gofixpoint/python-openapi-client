# coding: utf-8

"""
    fixpoint/v1/service.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fixpoint_openapi.models.v1_list_open_ai_chat_logs_response import V1ListOpenAIChatLogsResponse

class TestV1ListOpenAIChatLogsResponse(unittest.TestCase):
    """V1ListOpenAIChatLogsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1ListOpenAIChatLogsResponse:
        """Test V1ListOpenAIChatLogsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1ListOpenAIChatLogsResponse`
        """
        model = V1ListOpenAIChatLogsResponse()
        if include_optional:
            return V1ListOpenAIChatLogsResponse(
                logs = [
                    fixpoint_openapi.models.v1_open_ai_chat_log.v1OpenAIChatLog(
                        name = '', 
                        model_name = '', 
                        app_name = '', 
                        data_source_name = '', 
                        session_name = '', 
                        input_log = fixpoint_openapi.models.v1_open_ai_chat_input_log.v1OpenAIChatInputLog(
                            name = '', 
                            model_name = '', 
                            session_name = '', 
                            messages = [
                                fixpoint_openapi.models.v1_input_message.v1InputMessage(
                                    role = '', 
                                    content = '', )
                                ], 
                            temperature = 1.337, 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            trace_id = '', ), 
                        output_log = fixpoint_openapi.models.v1_open_ai_chat_output_log.v1OpenAIChatOutputLog(
                            name = '', 
                            input_name = '', 
                            openai_id = '', 
                            model_name = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            choices = [
                                fixpoint_openapi.models.v1_open_ai_chat_output_log_choice.v1OpenAIChatOutputLogChoice(
                                    index = '', 
                                    message = fixpoint_openapi.models.v1_output_message.v1OutputMessage(
                                        role = '', 
                                        content = '', 
                                        tool_calls = [
                                            fixpoint_openapi.models.v1_tool_call.v1ToolCall(
                                                id = '', 
                                                type = '', 
                                                function = fixpoint_openapi.models.tool_call_function.ToolCallFunction(
                                                    name = '', 
                                                    arguments = '', ), )
                                            ], ), 
                                    finish_reason = '', )
                                ], 
                            usage = fixpoint_openapi.models.v1_open_ai_chat_output_log_usage.v1OpenAIChatOutputLogUsage(
                                prompt_tokens = 56, 
                                completion_tokens = 56, 
                                total_tokens = 56, ), 
                            trace_id = '', ), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                next_page_token = '',
                total_entries = ''
            )
        else:
            return V1ListOpenAIChatLogsResponse(
        )
        """

    def testV1ListOpenAIChatLogsResponse(self):
        """Test V1ListOpenAIChatLogsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
